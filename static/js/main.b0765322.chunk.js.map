{"version":3,"sources":["MenuList.js","Menu.js","Map.js","App.js","serviceWorker.js","modules/App/stateTree.js","modules/App/sequences.js","modules/App/index.js","modules/MenuList/stateTree.js","modules/MenuList/sequences.js","modules/MenuList/index.js","modules/index.js","controller.js","index.js"],"names":["anchorEl","MenuList","handleClose","handleMenuList","event","currentTarget","_this2","this","classes","props","open","react_default","a","createElement","IconButton_default","key","color","aria-label","id","aria-owns","aria-haspopup","onClick","evt","handleMenuListOpen","className","menuButton","disabled","connection_id","fieldsEditing","emptyDataSet","Menu_default","index_es","onClose","React","Component","connect","menuItems","state","_templateObject","current","_templateObject2","_templateObject3","setCurrentItem","signal","_templateObject4","clearConnection","_templateObject5","_templateObject6","withStyles","theme","marginLeft","marginRight","withTheme","root","flexGrow","grow","AppBar_default","position","Toolbar_default","Typography_default","variant","Button_default","src_MenuList","Map","es_Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Marker","Popup","App","src_Menu","src_Map_0","Boolean","window","location","hostname","match","stateTree","appName","init","sequence","set","sequences_templateObject","Module","signals","records","item 1","label","item 2","item 3","toggle","MenuList_sequences_templateObject","_ref","item","modules","Devtools","Controller","root_module","devtools","host","ReactDOM","render","_cerebral_react","controller","style","height","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0765322.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"@cerebral/react\";\nimport { state, signal } from \"cerebral/tags\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar anchorEl;\n\nconst styles = theme => ({\n  menuButton: {\n    marginLeft: 2,\n    marginRight: 2\n  },\n});\n\nclass MenuList extends React.Component {\n\n  handleClose = () => {\n    anchorEl = null;\n  };\n\n  handleMenuList = event => {\n    anchorEl = event.currentTarget;\n  };\n\n  render() {\n\n    const { classes } = this.props;\n\n    anchorEl = this.props.open ? anchorEl : null;\n    return (\n      <div>\n        <IconButton\n          key={7}\n          color=\"inherit\"\n          aria-label=\"simple-menu-button\"\n          id=\"simple-menu-button\"\n          aria-owns={\"simple-menu\"}\n          aria-haspopup=\"true\"\n          onClick={(evt) => {this.handleMenuList(evt); this.props.handleMenuListOpen({})}}\n          className={classes.menuButton}\n          disabled={\n            this.props.connection_id === \"none\" || this.props.fieldsEditing || this.props.emptyDataSet\n          }\n        >\n          <MenuIcon />\n        </IconButton>\n        {(this.props.open) ?\n          <Menu\n            id=\"simple-menu\"\n            open={this.props.open}\n            onClose={this.props.handleMenuListOpen}\n            anchorEl={anchorEl}\n          >\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Add User</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Reset Cache</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Reset Demo</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Logout</MenuItem>\n          </Menu>\n          : null}\n      </div>\n    )}\n}\n\n\nMenuList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired\n};\n\nexport default connect(\n  {\n    menuItems:          state`MenuList.records`,\n    current:            state`MenuList.current`,\n    open:               state`MenuList.open`,\n\n    setCurrentItem:     signal`MenuList.setCurrentItem`,\n  //  addOperatorClicked: signal`operators.addOperatorClicked`,\n    clearConnection:    signal`Connections.clearConnection`,\n    handleMenuListOpen: signal`MenuList.handleMenuListOpen`,\n  },\n  withStyles(styles, {withTheme: true})(MenuList)\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuList from \"./MenuList\";\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  }\n};\n\nfunction ButtonAppBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Knowledge Graph App\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n\t\t      <MenuList />\n        </Toolbar>\n      </AppBar>\n\t\t</div>\n  );\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\nimport \"./Map.css\";\n\nclass Map extends React.Component {\n  render() {\n    return (\n      <LeafletMap\n        center={[40.428593, -86.913776]}\n        zoom={15}\n        maxZoom={40}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n        <Marker position={[40.428593, -86.913776]}>\n          <Popup>\n            Popup for any custom information.\n          </Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"@cerebral/react\";\nimport { state, signal } from \"cerebral/tags\";\nimport Menu from \"./Menu\";\nimport Map from \"./Map\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\t\t\t  <Menu />\n\t\t\t  <Map />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n\t{\n\n\t},\n\t(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let stateTree = {\n\n\tappName: \"Knowledge Graph\",\n\temptyDataSet: false\n\n};\n\nexport default stateTree;\n","import { sequence } from \"cerebral\";\nimport { state } from \"cerebral/tags\";\nimport { set } from \"cerebral/operators\";\n\nexport const init = sequence(\"App.init\", [\n\n  set(state`App.servio`, true)\n\n]);\n","import stateTree from \"./stateTree.js\";\nimport { Module } from \"cerebral\";\nimport * as signals from \"./sequences\";\n\nexport default Module({\n  state: stateTree,\n  signals\n});\n","let stateTree = {\n  open: false,\n  current: \"Item 1\",\n  records: {\n    \"item 1\": {\n      label: \"Item 1\"\n    },\n    \"item 2\": {\n      label: \"Item 2\"\n    },\n    \"item 3\": {\n      label: \"Item 3\"\n    }\n  }\n};\n\nexport default stateTree;\n","import { state } from \"cerebral/tags\";\nimport { toggle } from \"cerebral/operators\";\n\nexport var handleMenuListOpen = [toggle(state`MenuList.open`)];\n\nexport function setCurrentItem({props, state}){\n  if(props.item)\n    state.set(`MenuList.current`, props.item);\n}\n","import { Module } from 'cerebral';\nimport stateTree from './stateTree';\n\nimport * as signals from './sequences';\n\nexport default Module({\n  state : stateTree,\n  signals: signals\n});\n","import { Module } from \"cerebral\";\n\nimport App from \"./App\";\nimport MenuList from \"./MenuList\";\n\nexport default Module({\n  modules: {\n\t\tApp,\n\t\tMenuList\n\t}\n})\n","import { Controller } from 'cerebral';\nimport root_module from './modules';\n\nconst Devtools = (process.env.NODE_ENV === 'production' ?\n\t\t\t\t\tnull :\n\t\t\t\t\trequire('cerebral/devtools').default);\nexport default Controller(root_module, {\n\tdevtools: Devtools && Devtools({host: 'localhost:8787'})\n})\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container } from \"@cerebral/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport controller from \"./controller\";\n\nReactDOM.render(\n\t<Container controller={controller} style={{ height: \"100vh\" }}>\n      <App />\n  </Container>,\n\t\n\tdocument.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
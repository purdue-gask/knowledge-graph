{"version":3,"sources":["MenuList.js","Menu.js","Map.js","Connections.js","App.js","serviceWorker.js","modules/App/stateTree.js","modules/twitter/sequences.js","modules/App/sequences.js","modules/App/index.js","modules/Connections/chains.js","modules/Menu/index.js","modules/MenuList/stateTree.js","modules/MenuList/sequences.js","modules/MenuList/index.js","modules/Connections/index.js","modules/index.js","controller.js","index.js"],"names":["anchorEl","MenuList","handleClose","handleMenuList","event","currentTarget","_this2","this","classes","props","open","react_default","a","createElement","IconButton_default","key","color","aria-label","id","aria-owns","aria-haspopup","onClick","evt","handleMenuListOpen","className","menuButton","disabled","connection_id","fieldsEditing","emptyDataSet","Menu_default","index_es","onClose","React","Component","connect","menuItems","state","_templateObject","current","_templateObject2","_templateObject3","setCurrentItem","signal","_templateObject4","clearConnection","_templateObject5","_templateObject6","withStyles","theme","marginLeft","marginRight","withTheme","Menu","_this","root","AppBar_default","position","Toolbar_default","Typography_default","variant","grow","Button_default","connectionsClicked","src_MenuList","Menu_templateObject","Menu_templateObject2","flexGrow","Map","es_Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Marker","Popup","oadaDomainText","Connections_templateObject","oadaFieldsDomainText","Connections_templateObject2","show","Connections_templateObject3","submitClicked","Connections_templateObject4","cancelClicked","Connections_templateObject5","oadaDomainChanged","Connections_templateObject6","oadaFieldsDomainChanged","_templateObject7","_React$Component","Connections","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","Dialog_default","label","onChange","e","target","style","width","autoFocus","App","init","src_Menu","src_Connections","src_Map_0","App_templateObject","Boolean","window","location","hostname","match","stateTree","appName","contentType","bookmarksTwitter","model","tags","is_mobile","settings","view","editing","_localPath","tree","bookmarks","_type","_rev","twitter","*","fetch","sequence","_ref","get","path","watch","signals","_ref2","requests","oada","when","sequences_templateObject","sequences_templateObject2","true","mapOadaToTwitter","set","sequences_templateObject3","false","console","log","sequences_templateObject4","fetchNoWatch","_ref3","sequences_templateObject5","sequences_templateObject6","sequences_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","refresh","_templateObject19","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_ref4","Promise","map","keys","twitt","concat","then","_OPTIONS","redirect","metadata","scope","md","MobileDetect","navigator","userAgent","mobile","App_sequences_templateObject","domain","options","token","clearCacheButtonClicked","Module","updateOadaDomain","chains_templateObject","chains_templateObject2","chains_templateObject3","chains_templateObject4","chains_templateObject5","chains_templateObject6","chains_templateObject7","chains_templateObject8","chains_templateObject9","chains_templateObject10","chains_templateObject11","cerebralModule","resetCache","unset","chains_templateObject12","chains_templateObject13","setConnection","chains_templateObject14","chains_templateObject15","chains_templateObject16","chains_templateObject17","chains_templateObject18","chains_templateObject19","chains_templateObject20","cancelConnection","chains_templateObject21","chains_templateObject22","chains_templateObject23","_templateObject24","_templateObject25","showConnections","_templateObject26","records","item 1","item 2","item 3","toggle","MenuList_sequences_templateObject","item","_CURRENT_HOST","oada_domain_text","oada_fields_domain_text","oada_domain","oada_fields_domain","modules","Devtools","Controller","root_module","devtools","host","ReactDOM","render","_cerebral_react","controller","height","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e634f41.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"@cerebral/react\";\nimport { state, signal } from \"cerebral/tags\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar anchorEl;\n\nconst styles = theme => ({\n  menuButton: {\n    marginLeft: 2,\n    marginRight: 2\n  },\n});\n\nclass MenuList extends React.Component {\n\n  handleClose = () => {\n    anchorEl = null;\n  };\n\n  handleMenuList = event => {\n    anchorEl = event.currentTarget;\n  };\n\n  render() {\n\n    const { classes } = this.props;\n\n    anchorEl = this.props.open ? anchorEl : null;\n    return (\n      <div>\n        <IconButton\n          key={7}\n          color=\"inherit\"\n          aria-label=\"simple-menu-button\"\n          id=\"simple-menu-button\"\n          aria-owns={\"simple-menu\"}\n          aria-haspopup=\"true\"\n          onClick={(evt) => {this.handleMenuList(evt); this.props.handleMenuListOpen({})}}\n          className={classes.menuButton}\n          disabled={\n            this.props.connection_id === \"none\" || this.props.fieldsEditing || this.props.emptyDataSet\n          }\n        >\n          <MenuIcon />\n        </IconButton>\n        {(this.props.open) ?\n          <Menu\n            id=\"simple-menu\"\n            open={this.props.open}\n            onClose={this.props.handleMenuListOpen}\n            anchorEl={anchorEl}\n          >\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Add User</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Reset Cache</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Reset Demo</MenuItem>\n            <MenuItem onClick={()=>{ this.props.handleMenuListOpen({}); \n\t\t\t\t\t\t\tthis.props.handleMenuListOpen({}) }}>Logout</MenuItem>\n          </Menu>\n          : null}\n      </div>\n    )}\n}\n\n\nMenuList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired\n};\n\nexport default connect(\n  {\n    menuItems:          state`MenuList.records`,\n    current:            state`MenuList.current`,\n    open:               state`MenuList.open`,\n\n    setCurrentItem:     signal`MenuList.setCurrentItem`,\n  //  addOperatorClicked: signal`operators.addOperatorClicked`,\n    clearConnection:    signal`Connections.clearConnection`,\n    handleMenuListOpen: signal`MenuList.handleMenuListOpen`,\n  },\n  withStyles(styles, {withTheme: true})(MenuList)\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { signal } from \"cerebral/tags\";\nimport { connect } from \"@cerebral/react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n//import MenuIcon from '@material-ui/icons/Menu';\nimport MenuList from \"./MenuList\";\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  }\n};\n\nclass Menu extends React.Component {\n\trender(){\n\t\t const { classes } = this.props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Knowledge Graph App\n          </Typography>\n         <Button\n            key={2}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={() => this.props.connectionsClicked({})}\n            className={classes.menuButton}\n            disabled={false}\n          >\n            Connect\n          </Button>\n        <MenuList />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n\n\t}\n}\n\nMenu.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n  {\n    connectionsClicked:         signal`Menu.connectionsClicked`,\n    handleMenuListOpen:         signal`MenuList.handleMenuListOpen`,\n  },\n  withStyles(styles, { withTheme: true })(Menu)\n);\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\nimport \"./Map.css\";\n\nclass Map extends React.Component {\n  render() {\n    return (\n      <LeafletMap\n        center={[40.428593, -86.913776]}\n        zoom={15}\n        maxZoom={40}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n        <Marker position={[40.428593, -86.913776]}>\n          <Popup>\n            Popup for any custom information.\n          </Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport { connect } from \"@cerebral/react\";\nimport {\n  TextField,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Button from \"@material-ui/core/Button\";\nimport { state, signal } from \"cerebral/tags\";\n\nexport default connect(\n  {\n    oadaDomainText:           state`Connections.oada_domain_text`,\n    oadaFieldsDomainText:     state`Connections.oada_fields_domain_text`,\n    show:                     state`Connections.show`,\n\n    submitClicked:            signal`Connections.submitClicked`,\n    cancelClicked:            signal`Connections.cancelClicked`,\n    oadaDomainChanged:        signal`Connections.oadaDomainChanged`,\n    oadaFieldsDomainChanged:  signal`Connections.oadaFieldsDomainChanged`\n  },\n\n  class Connections extends React.Component {\n    render() {\n      return (\n        <Dialog open={this.props.show} className={\"connections-dialog\"}>\n          <DialogTitle id=\"alert-dialog-title\">\n            {\"Data Source [0.1.0]\"}{\" \"}\n          </DialogTitle>\n          <DialogContent>\n            At what OADA domain is your data stored?\n          </DialogContent>\n          <DialogContent>\n            <div>\n              <TextField\n                label=\"Domain\"\n                value={this.props.oadaDomainText}\n                onChange={e => this.props.oadaDomainChanged({ value: e.target.value })}\n                style={{ width: 250 }}\n              />\n            </div>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={() => {\n                this.props.cancelClicked({});\n              }}\n              color=\"secondary\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {this.props.submitClicked({});}}\n              color=\"secondary\"\n              autoFocus\n            >\n              Submit\n            </Button>\n          </DialogActions>\n        </Dialog>\n      );\n    }\n  }\n);\n\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"@cerebral/react\";\nimport { state, signal } from \"cerebral/tags\";\nimport Menu from \"./Menu\";\nimport Map from \"./Map\";\nimport Connections from \"./Connections\";\n\nclass App extends Component {\n\tcomponentWillMount() {\n    this.props.init({});\n\t}\n  render() {\n    return (\n      <div className=\"App\">\n\t\t\t  <Menu />\n\t\t\t <Connections />\n\t\t\t  <Map />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n\t{\n    init: signal`App.init`\n\t},\n\t(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let stateTree = {\n\tappName: \"Knowledge Graph\",\n\tcontentType: 'application/vnd.oada.yield.1+json',\n  bookmarksTwitter: '/bookmarks/twitter',\n\tmodel: {tags: {}},\n  is_mobile: false,\n\temptyDataSet: false,\n  settings: {},\n  view: {\n    editing: false,\n    settings: {},\n  }\n};\n\nexport default stateTree;\n","import { sequence } from \"cerebral\";\nimport { set, when } from \"cerebral/operators\";\nimport { state, props } from \"cerebral/tags\";\nimport Promise from \"bluebird\";\nimport oada from \"@oada/cerebral-module/sequences\";\n//import uuid from \"uuid\";\n\n/* Configuration values */\nlet _localPath = \"/bookmarks/twitter\";\n//let _TYPE = \"application/vnd.oada.yield.1+json\";\n/* Tree that resembles the data model for twitter module */\nlet tree = {\n  bookmarks: {\n    _type: \"application/vnd.oada.bookmarks.1+json\",\n    _rev: \"0-0\",\n    twitter: {\n      _type: \"application/vnd.oada.yield.1+json\",\n      _rev: \"0-0\",\n      \"*\": {\n        _type: \"application/vnd.oada.yield.1+json\",\n        _rev: \"0-0\"\n      }\n    }\n  }\n};\n\n/**\n * fetches the twitt\n * @type {Primitive}\n */\nexport const fetch = sequence(\"twitter.fetch\", [\n  ({ state, props }) => ({\n    connection_id: state.get(\"twitter.connection_id\"),\n    path: _localPath,\n    tree,\n    watch: { signals: [\"twitter.handleWatchUpdate\"] }\n  }),\n  buildFetchRequest,\n  oada.get,\n  when(state`oada.${props`connection_id`}.bookmarks.twitter`),\n  {\n    true: sequence(\"fetchTwitterSuccess\", [\n      mapOadaToTwitter,\n      set(state`App.emptyDataSet`, false),\n    ]),\n    false: sequence(\"fetchTwitterEmptySet\", [\n      () => (\n        console.log(\"--> Twitter empty set\")\n      ),\n      set(state`App.emptyDataSet`, true),\n    ]),\n\n  }\n]);\n\n/**\n * builds requests in the expected format in the cerebral-module\n * @param state\n * @returns {{requests: *[]}}\n */\nfunction buildFetchRequest({ state }) {\n  let requests = [\n    {\n      connection_id: state.get(\"twitter.connection_id\"),\n      path: _localPath,\n      tree,\n      watch: { signals: [\"twitter.handleWatchUpdate\"] }\n    }\n  ];\n  return { requests };\n}\n\nexport const fetchNoWatch = sequence(\"twitter.fetchNoWatch\", [\n  ({ state, props }) => ({\n    connection_id: state.get(\"twitter.connection_id\"),\n    path: _localPath,\n    tree\n  }),\n  when(state`oada.${props`connection_id`}.bookmarks.twitter`),\n  {\n    true: sequence(\"fetchTwitterSuccess\", [\n      mapOadaToTwitter,\n      set(state`App.emptyDataSet`, false),\n    ]),\n    false: sequence(\"fetchTwitterEmptySetNoWatch\", [\n      () => (\n        console.log(\"--> Twitter empty set no watch\")\n      ),\n      set(state`App.emptyDataSet`, true),\n    ])\n  }\n]);\n\n/**\n * Initialize the twitter module\n * @type {Primitive}\n */\nexport const init = sequence(\"twitter.init\", [\n  //getConnectionsFromStorage,\n  when(state`Connections.connection_id`),\n  {\n    true: [oada.connect],\n    false: [\n      oada.connect,\n      set(state`twitter.connection_id`, props`connection_id`),\n      set(state`Connections.connection_id`, props`connection_id`),\n      set(state`connections.twitter.connection_id`, props`connection_id`)\n    ]\n  },\n  //\n  set(state`twitter.loading`, true),\n  fetch,\n  set(state`twitter.loading`, false),\n  set(props`type`, \"twitter\")\n]);\n\n/**\n * gets the Connections from localCache, it updates all necessary state to auto-init the app\n * @param state\n */\n//function getConnectionsFromStorage({ state }) {\n//  let connections = JSON.parse(localStorage.getItem(\"_GASK.Connections\"));\n//  console.log(\"--> twitter.init storage connections --> \", connections);\n//  if (connections && connections[\"connection_id\"]) {\n//    state.set(\"Connections.show\", false);\n//    let connectionId = connections[\"connection_id\"];\n//    let oadaDomain = connections[\"oada_domain\"];\n//    console.log(\"--> twitter init connectionId and OadaDomain\", connectionId, oadaDomain);\n//    state.set(`twitter.connection_id`, connectionId);\n//    state.set(\"Connections.oada_domain\", oadaDomain);\n//    state.set(\"Connections.oada_domain_text\", oadaDomain);\n//  }\n//}\n\n/**\n * refresh the twitter module\n * when handling updates/watches\n * @type {Primitive}\n */\nexport const refresh = sequence(\"twitter.refresh\", [\n  set(state`twitter.connection_id`, props`connection_id`),\n  set(state`twitter.loading`, true),\n  fetchNoWatch,\n  set(state`twitter.loading`, false),\n  set(props`type`, \"twitter\")\n]);\n\n/**\n * Handles updates in the resource\n * @type {*[]}\n */\nexport const handleWatchUpdate = sequence(\"twitter.handleWatchUpdate\", [\n  () => {console.log(\"-->twitter.handleWatchUpdate\");},\n  refresh\n]);\n\n/**\n * Maps twitter records\n * @param props\n * @param state\n * @returns {*}\n */\nexport function mapOadaToTwitter({ props, state }) {\n  let connection_id = state.get(\"twitter.connection_id\");\n  let twitter       = state.get(\"oada.\" + connection_id + \".bookmarks.twitter\");\n\n  if (twitter) {\n    return Promise.map(Object.keys(twitter || {}), twitt => {\n      if (twitt[0] !== \"_\" && twitt !== \"twitter\") {\n        //let op = state.get(`oada.${connection_id}.bookmarks.twitter.${twitt}`);\n        state.set(`twitter.records.${twitt}`, twitter[twitt]);       \n\t\t\t\tconsole.log(\"twitt record -> \", twitter[twitt]);\n        return;\n      }\n    }).then(() => {\n      return;\n    });\n  }\n} //mapOadaToTwitter\n\n/**\n *\n * @param props\n * @param state\n * @returns {*}\n */\nexport function mapTwitter({ props, state }) {\n  let connection_id = state.get(\"twitter.connection_id\");\n  let twitter       = state.get(\"oada.\" + connection_id + \".bookmarks.twitter\");\n\n  if (twitter) {\n    return Promise.map(Object.keys(twitter || {}), twitt => {\n      if (twitt[0] !== \"_\" && twitt !== \"twitter\") {\n        let op = state.get(`oada.${connection_id}.bookmarks.twitter.${twitt}`);\n        if (op && op.id) {\n          state.set(`twitter.records.${twitt}`, twitter[twitt]);\n        }\n        return;\n      }\n    }).then(() => {\n      return;\n    });\n  }\n} //mapOperations\n\n","import MobileDetect from \"mobile-detect\";\nimport * as oada from \"@oada/cerebral-module/sequences\";\nimport * as twitter from \"../twitter/sequences\";\nimport { sequence } from \"cerebral\";\nimport { state } from \"cerebral/tags\";\nimport { when, set } from \"cerebral/operators\";\n\nconst _SCOPE = \"oada.yield:all\";\nconst _TOKEN = \"def\";\n\n// previous http\nconst _OPENATK_METADATA =\n  \"eyJqa3UiOiJodHRwczovL2lkZW50aXR5Lm9hZGEtZGV2LmNvbS9jZXJ0cyIsImtpZCI6ImtqY1NjamMzMmR3SlhYTEpEczNyMTI0c2ExIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJyZWRpcmVjdF91cmlzIjpbImh0dHA6Ly9vcGVuYXRrLmNvbS9GaWVsZFdvcmtBcHAvb2F1dGgyL3JlZGlyZWN0Lmh0bWwiLCJodHRwOi8vbG9jYWxob3N0L29hdXRoMi9yZWRpcmVjdC5odG1sIl0sInRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmNsaWVudC1hc3NlcnRpb24tdHlwZTpqd3QtYmVhcmVyIiwiZ3JhbnRfdHlwZXMiOlsiYXV0aG9yaXphdGlvbl9jb2RlIl0sInJlc3BvbnNlX3R5cGVzIjpbInRva2VuIiwiY29kZSIsImlkX3Rva2VuIiwiaWRfdG9rZW4gdG9rZW4iLCJjb2RlIGlkX3Rva2VuIiwiY29kZSB0b2tlbiIsImNvZGUgaWRfdG9rZW4gdG9rZW4iXSwiY2xpZW50X25hbWUiOiJPcGVuQVRLIiwiY2xpZW50X3VyaSI6Imh0dHA6Ly9vcGVuYXRrLmNvbSIsImNvbnRhY3RzIjpbIlNhbSBOb2VsIDxzYW5vZWxAcHVyZHVlLmVkdT4iXSwiandrcyI6eyJrZXlzIjpbeyJrdHkiOiJSU0EiLCJuIjoiemF1WkZCdU1kbHYxa1lqelViNHEtXzNtNHNtRnhuZnc0U1lvYUhxN2NpOFNjdFkzeGo3cmRBSHlrUXBuUVZyajZLTzhtYUh2LTBCdlc1TWhjZ2l2a3VZcy16SEV2ZllCZVZCbmN2SGdPa0pQYmM5MUN3X2l3T1k3RUhXQjhoTTdWaUxRVmNfRHYwaDhuSnliQnZoTDA0Q0hRdDdDcE10VllHNmZvSlhjM2RxNTJqTlFiQkhJWjVtN1Z6MUt0eXpvTGNwOE8ybWhhTHA0NVVyM0NfMWVHdHY4bjVOejliV19CaDVYRlliRHh2N0JuaFpOSXcxR0NiampBd210Ym5uTDdHZ2Y0Q3k2MHdSSG1SNHZvZTIxT0lqb0FTcTJqWjAzeDEybVhzN0hQSTNZQjR5Mjl3dlpNdzJnTHpPZFRvcnJxTy10bG1uMWJvUGtXS0pKU1hvQXZ3IiwiZSI6IkFRQUIifV19LCJzb2Z0d2FyZV9pZCI6ImE3MDNiZmRjLTNmYTEtNDk5Zi1iOTA1LTExZjBiNTRmMzgwNyIsInJlZ2lzdHJhdGlvbl9wcm92aWRlciI6Imh0dHBzOi8vaWRlbnRpdHkub2FkYS1kZXYuY29tIiwiaWF0IjoxNTMzODQ2MTEyfQ.Y9BlbqHzOvufADGAW9HG4Yx2rqbg6zPalpcjSS_97Mpg36lOuADGJ4YTQ2iQfRlZjzqBi1sUq3iFhReBfk89Oy2nSEY6RVPnONK5v6a73jce3xGPUWk8DDl3rf3lcrt-IqWFoAieUie7WK5nrPFIe-_xcgYdChnuGrugjO9dGOY\";\n\nconst _REDIRECT_OPENATK = \"https://openatk.com/GASK/oauth2/redirect.html\";\n\n/**\n * OpenATK domain - Production\n * @type {string}\n * @private\n */\nconst _CURRENT_METADATA = _OPENATK_METADATA;\nconst _CURRENT_REDIRECT = _REDIRECT_OPENATK;\n\nconst _OPTIONS =  {\n  redirect: _CURRENT_REDIRECT,\n  metadata: _CURRENT_METADATA,\n  scope:    _SCOPE\n};\n\nexport const init = sequence(\"App.init\", [\n  setMobile,\n  //getConnectionsFromStorage,\n  when(state`Connections.connection_id`),\n  {\n    true: sequence(\"autoInitSuccess\", [\n      ({ state }) => ({\n        domain:        state.get(\"Connections.oada_domain\"),\n        options:       _OPTIONS,\n        token:         _TOKEN,\n        connection_id: state.get(\"twitter.connection_id\")\n      }),\n      twitter.init,\n    ]),\n    false: []\n  }\n]);\n\n/**\n * gets the Connections from localCache, it updates all necessary state to auto-init the app\n * @param state\n */\nfunction getConnectionsFromStorage({ state }) {\n  let connections = JSON.parse(\n    localStorage.getItem(\"_GASK.Connections\")\n  );\n  if (connections && connections[\"connection_id\"]) {\n    let connectionId = connections[\"connection_id\"];\n    let oadaDomain   = connections[\"oada_domain\"];\n    state.set(\"Connections.show\", false);\n    state.set(`twitter.connection_id`, connectionId);\n    state.set(`Connections.connection_id`, connectionId);\n    state.set(\"Connections.oada_domain\", oadaDomain);\n    state.set(\"Connections.oada_domain_text\", oadaDomain);\n  } else {\n    state.set(\"Connections.show\", true);\n  }\n}\n\nexport const clearCacheButtonClicked = [\n  ({ state, props }) => ({\n    connection_id: state.get(\"twitter.connection_id\")\n  }),\n  oada.resetCache,\n  init\n];\n\nfunction setMobile({ state }) {\n  let md = new MobileDetect(window.navigator.userAgent);\n  state.set(`App.is_mobile`, md.mobile() !== null);\n}\n","import stateTree from \"./stateTree.js\";\nimport { Module } from \"cerebral\";\nimport * as signals from \"./sequences\";\n//import StorageModule from \"@cerebral/storage\";\n\n//const LocalCache = StorageModule({\n//  target: window.localStorage ? localStorage : null,\n//  json: true,\n//  sync: {\n//    Connections: \"Connections\"\n//  },\n//  prefix: \"_GASK\"\n//});\n\nexport default Module({\n  state: stateTree,\n  signals,\n\t//modules: { LocalCache }\n});\n","/* cerebral imports */\nimport {state, props} from 'cerebral/tags';\nimport { set } from 'cerebral/operators';\nimport cerebralModule from '@oada/cerebral-module/sequences';\n\nconst _SCOPE = 'oada.yield:all';\nconst _OPENATK_METADATA = 'eyJqa3UiOiJodHRwczovL2lkZW50aXR5Lm9hZGEtZGV2LmNvbS9jZXJ0cyIsImtpZCI6ImtqY1NjamMzMmR3SlhYTEpEczNyMTI0c2ExIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJyZWRpcmVjdF91cmlzIjpbImh0dHA6Ly9vcGVuYXRrLmNvbS9GaWVsZFdvcmtBcHAvb2F1dGgyL3JlZGlyZWN0Lmh0bWwiLCJodHRwOi8vbG9jYWxob3N0L29hdXRoMi9yZWRpcmVjdC5odG1sIl0sInRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmNsaWVudC1hc3NlcnRpb24tdHlwZTpqd3QtYmVhcmVyIiwiZ3JhbnRfdHlwZXMiOlsiYXV0aG9yaXphdGlvbl9jb2RlIl0sInJlc3BvbnNlX3R5cGVzIjpbInRva2VuIiwiY29kZSIsImlkX3Rva2VuIiwiaWRfdG9rZW4gdG9rZW4iLCJjb2RlIGlkX3Rva2VuIiwiY29kZSB0b2tlbiIsImNvZGUgaWRfdG9rZW4gdG9rZW4iXSwiY2xpZW50X25hbWUiOiJPcGVuQVRLIiwiY2xpZW50X3VyaSI6Imh0dHA6Ly9vcGVuYXRrLmNvbSIsImNvbnRhY3RzIjpbIlNhbSBOb2VsIDxzYW5vZWxAcHVyZHVlLmVkdT4iXSwiandrcyI6eyJrZXlzIjpbeyJrdHkiOiJSU0EiLCJuIjoiemF1WkZCdU1kbHYxa1lqelViNHEtXzNtNHNtRnhuZnc0U1lvYUhxN2NpOFNjdFkzeGo3cmRBSHlrUXBuUVZyajZLTzhtYUh2LTBCdlc1TWhjZ2l2a3VZcy16SEV2ZllCZVZCbmN2SGdPa0pQYmM5MUN3X2l3T1k3RUhXQjhoTTdWaUxRVmNfRHYwaDhuSnliQnZoTDA0Q0hRdDdDcE10VllHNmZvSlhjM2RxNTJqTlFiQkhJWjVtN1Z6MUt0eXpvTGNwOE8ybWhhTHA0NVVyM0NfMWVHdHY4bjVOejliV19CaDVYRlliRHh2N0JuaFpOSXcxR0NiampBd210Ym5uTDdHZ2Y0Q3k2MHdSSG1SNHZvZTIxT0lqb0FTcTJqWjAzeDEybVhzN0hQSTNZQjR5Mjl3dlpNdzJnTHpPZFRvcnJxTy10bG1uMWJvUGtXS0pKU1hvQXZ3IiwiZSI6IkFRQUIifV19LCJzb2Z0d2FyZV9pZCI6ImE3MDNiZmRjLTNmYTEtNDk5Zi1iOTA1LTExZjBiNTRmMzgwNyIsInJlZ2lzdHJhdGlvbl9wcm92aWRlciI6Imh0dHBzOi8vaWRlbnRpdHkub2FkYS1kZXYuY29tIiwiaWF0IjoxNTMzODQ2MTEyfQ.Y9BlbqHzOvufADGAW9HG4Yx2rqbg6zPalpcjSS_97Mpg36lOuADGJ4YTQ2iQfRlZjzqBi1sUq3iFhReBfk89Oy2nSEY6RVPnONK5v6a73jce3xGPUWk8DDl3rf3lcrt-IqWFoAieUie7WK5nrPFIe-_xcgYdChnuGrugjO9dGOY';\nconst _REDIRECT_OPENATK = 'http://openatk.com/FieldWorkApp/oauth2/redirect.html';\nconst _TOKEN = 'def';\n\n/**\n * OpenATK domain\n * @type {string}\n * @private\n */\nconst _CURRENT_METADATA = _OPENATK_METADATA;\nconst _CURRENT_REDIRECT = _REDIRECT_OPENATK;\n\nconst _OPTIONS =  {\n  redirect: _CURRENT_REDIRECT,\n  metadata: _CURRENT_METADATA,\n  scope:    _SCOPE\n};\n\nexport var signOut = [\n  set(state`Connections.oada_token`, ''),\n  set(state`Connections.oada_domain`, ''),\n  set(state`Connections.oada_fields_domain`, ''),\n  set(state`Connections.oada_domain_text`, ''),\n  set(state`Connections.oada_fields_domain_text`, ''),\n];\n\nexport var updateOadaDomain = [\n  set(state`Connections.oada_domain_text`, props`value`),\n];\n\nexport var updateOadaFieldsDomain = [\n  set(state`Connections.oada_fields_domain_text`, props`value`),\n];\n\nexport var clearConnection = [\n  set(props`domain`, state`Connections.oada_domain`), \n  cerebralModule.resetCache,\n  connectionCleanUp,\n  set(state`Connections.show`, true),\n];\n\nexport var init = [\n  set(state`Connections.show`, false),\n  ({state}) => ({\n    domain:         state.get('Connections.oada_domain'),\n    options:       _OPTIONS,\n    token:         _TOKEN,\n    connection_id: state.get('operations.connection_id'),\n  }),\n  //operatorsModule.init,\n  //loadFldListData\n];\n\nexport var setConnection = [\n  set(state`Connections.show`, false),\n  set(state`Connections.oada_domain`, state`Connections.oada_domain_text`),\n  set(props`domain`, state`Connections.oada_domain`), \n  cerebralModule.resetCache,\n  init,\n  set(props`domain`, state`Connections.oada_domain`)\n];\n\nexport var cancelConnection = [\n  set(state`Connections.show`, false),\n  set(state`Connections.oada_domain`, state`Connections.oada_domain`),\n  set(state`Connections.oada_fields_domain`,  state`Connections.oada_domain`),\n];\n\nexport var showConnections = [\n  set(state`Connections.show`, true)\n];\n\nfunction connectionCleanUp({state, props}){\n  let connection_id = state.get('operations.connection_id');\n  /* cleaning up connections from oada state */\n  state.unset('oada.connections');\n  /* cleaning up previous connection_id from oada state */\n  state.unset('oada.' + connection_id)\n}\n\n","import { Module } from 'cerebral';\nimport {\n    showConnections,\n   // signOut,\n} from '../Connections/chains';\n\nimport { clearCacheButtonClicked} from \"../App/sequences\";\n\nexport default Module({\n  state: {\n    open: false\n  },\n\n  signals: {\n    connectionsClicked: showConnections,\n   // signoutClicked: signOut,\n  //  clearCacheClicked: clearCacheButtonClicked\n  }\n});\n","let stateTree = {\n  open: false,\n  current: \"Item 1\",\n  records: {\n    \"item 1\": {\n      label: \"Item 1\"\n    },\n    \"item 2\": {\n      label: \"Item 2\"\n    },\n    \"item 3\": {\n      label: \"Item 3\"\n    }\n  }\n};\n\nexport default stateTree;\n","import { state } from \"cerebral/tags\";\nimport { toggle } from \"cerebral/operators\";\n\nexport var handleMenuListOpen = [toggle(state`MenuList.open`)];\n\nexport function setCurrentItem({props, state}){\n  if(props.item)\n    state.set(`MenuList.current`, props.item);\n}\n","import { Module } from 'cerebral';\nimport stateTree from './stateTree';\n\nimport * as signals from './sequences';\n\nexport default Module({\n  state : stateTree,\n  signals: signals\n});\n","import { Module } from 'cerebral';\n\nimport {\n  setConnection,\n  cancelConnection,\n  updateOadaDomain,\n  clearConnection\n} from './chains';\n\nlet _OADA_HOST = \"https://oada.openatk.com\";\nlet _CURRENT_HOST = _OADA_HOST;\n\nexport default Module({\n\n\tstate : {\n\t\toada_domain_text:        _CURRENT_HOST,\n    oada_fields_domain_text: _CURRENT_HOST,\n\t\toada_domain:             _CURRENT_HOST,\n    oada_fields_domain:      _CURRENT_HOST,\n\t\tshow :                   false\n\t}, \n\n\tsignals: {\n\t\tsubmitClicked:           setConnection,\n\t\tcancelClicked:           cancelConnection,\n\t\toadaDomainChanged:       updateOadaDomain,\n    clearConnection:         clearConnection\n  }\n});\n","import { Module } from \"cerebral\";\n\nimport App from \"./App\";\nimport Menu from \"./Menu\";\nimport MenuList from \"./MenuList\";\nimport Connections from \"./Connections\";\n\nexport default Module({\n  modules: {\n\t\tApp,\n\t\tMenu,\n\t\tMenuList,\n\t\tConnections\n\t}\n})\n","import { Controller } from 'cerebral';\nimport root_module from './modules';\n\nconst Devtools = (process.env.NODE_ENV === 'production' ?\n\t\t\t\t\tnull :\n\t\t\t\t\trequire('cerebral/devtools').default);\nexport default Controller(root_module, {\n\tdevtools: Devtools && Devtools({host: 'localhost:8787'})\n})\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container } from \"@cerebral/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport controller from \"./controller\";\n\nReactDOM.render(\n\t<Container controller={controller} style={{ height: \"100vh\" }}>\n      <App />\n  </Container>,\n\t\n\tdocument.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
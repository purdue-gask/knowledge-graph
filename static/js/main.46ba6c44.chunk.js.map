{"version":3,"sources":["Menu.js","Map.js","App.js","serviceWorker.js","modules/App/stateTree.js","modules/App/sequences.js","modules/App/index.js","modules/index.js","controller.js","index.js"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Button_default","Map","es_Map","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","url","Marker","Popup","React","Component","App","src_Menu","src_Map_0","connect","Boolean","window","location","hostname","match","stateTree","appName","emptyDataSet","init","sequence","set","state","_templateObject","Module","signals","modules","Devtools","Controller","root_module","devtools","host","ReactDOM","render","_cerebral_react","controller","style","height","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mbA8CeA,2BApCA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KA2BFN,CAvBf,SAAsBO,GAAO,IACnBC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQP,MACtBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYE,UAAWJ,EAAQJ,WAAYa,MAAM,UAAUC,aAAW,QACpET,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,OAEFD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKJ,MAAM,UAAUL,UAAWJ,EAAQL,MAA5D,uBAGAM,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQO,MAAM,WAAd,kDCHKM,2LA1BX,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEC,OAAQ,CAAC,WAAY,WACrBC,KAAM,GACNC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,KAEfzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,IAAI,4CAEN3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAQvB,SAAU,CAAC,WAAY,YAC7BL,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,mDAnBQC,IAAMC,YCGlBC,mLAEF,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAChBH,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,cALaH,aAWHI,oBACd,GAGCH,GCVkBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXSC,EAPC,CAEfC,QAAS,kBACTC,cAAc,kGCCR,IAAMC,EAAOC,mBAAS,WAAY,CAEvCC,YAAIC,gBAADC,MAAoB,KCFVC,mBAAO,CACpBF,MAAON,EACPS,YCFaD,mBAAO,CACpBE,QAAS,CACTnB,SCHIoB,EACD,KAEUC,uBAAWC,EAAa,CACtCC,SAAUH,GAAYA,EAAS,CAACI,KAAM,qBCCvCC,IAASC,OACR1D,EAAAC,EAAAC,cAACyD,EAAA,UAAD,CAAWC,WAAYA,EAAYC,MAAO,CAAEC,OAAQ,UAC/C9D,EAAAC,EAAAC,cAAC6D,EAAD,OAGLC,SAASC,eAAe,SNoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.46ba6c44.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  }\n};\n\nfunction ButtonAppBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Knowledge Graph App\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n\t\t</div>\n  );\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\nimport \"./Map.css\";\n\nclass Map extends React.Component {\n  render() {\n    return (\n      <LeafletMap\n        center={[40.428593, -86.913776]}\n        zoom={10}\n        maxZoom={30}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n        <Marker position={[40.428593, -86.913776]}>\n          <Popup>\n            Popup for any custom information.\n          </Popup>\n        </Marker>\n      </LeafletMap>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"@cerebral/react\";\nimport { state, signal } from \"cerebral/tags\";\nimport Menu from \"./Menu\";\nimport Map from \"./Map\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\t\t\t  <Menu />\n\t\t\t  <Map />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n\t{\n\n\t},\n\t(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let stateTree = {\n\n\tappName: \"Knowledge Graph\",\n\temptyDataSet: false\n\n};\n\nexport default stateTree;\n","import { sequence } from \"cerebral\";\nimport { state } from \"cerebral/tags\";\nimport { set } from \"cerebral/operators\";\n\nexport const init = sequence(\"App.init\", [\n\n  set(state`App.servio`, true)\n\n]);\n","import stateTree from \"./stateTree.js\";\nimport { Module } from \"cerebral\";\nimport * as signals from \"./sequences\";\n\nexport default Module({\n  state: stateTree,\n  signals\n});\n","import { Module } from \"cerebral\";\n\nimport App from \"./App\";\n\nexport default Module({\n  modules: {\n\t\tApp\n\t}\n})\n","import { Controller } from 'cerebral';\nimport root_module from './modules';\n\nconst Devtools = (process.env.NODE_ENV === 'production' ?\n\t\t\t\t\tnull :\n\t\t\t\t\trequire('cerebral/devtools').default);\nexport default Controller(root_module, {\n\tdevtools: Devtools && Devtools({host: 'localhost:8787'})\n})\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Container } from \"@cerebral/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport controller from \"./controller\";\n\nReactDOM.render(\n\t<Container controller={controller} style={{ height: \"100vh\" }}>\n      <App />\n  </Container>,\n\t\n\tdocument.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}